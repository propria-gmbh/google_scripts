function callGPT(prompt) {
  const apiKey = PropertiesService.getScriptProperties().getProperty("OPENAI_API_KEY");
  const response = UrlFetchApp.fetch("https://api.openai.com/v1/chat/completions", {
    method: "post",
    contentType: "application/json",
    muteHttpExceptions: true,
    payload: JSON.stringify({
      model: "gpt-4",
      messages: [{ role: "user", content: prompt }]
    }),
    headers: { Authorization: "Bearer " + apiKey },
    timeout: 60000
  });

  const ui = SpreadsheetApp.getUi();
  const rawText = response.getContentText();
  logToSheet("üì¶ RAW RESPONSE", rawText);

  try {
    const json = JSON.parse(rawText);

    // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∞ –æ—à–∏–±–∫–∞ –æ—Ç OpenAI
    if (json.error) {
      const message = json.error.message || "Unknown error";
      const code = json.error.code || "unknown";

      logToSheet("‚ùå GPT ERROR", `${code}: ${message}`);

      switch (code) {
        case "insufficient_quota":
          ui.alert("‚ùå –û—à–∏–±–∫–∞ GPT: –ø—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞.\n\n–ó–∞–π–¥–∏ –Ω–∞ https://platform.openai.com/account/usage –∏ –ø—Ä–æ–≤–µ—Ä—å –±–∞–ª–∞–Ω—Å.");
          break;
        case "invalid_api_key":
          ui.alert("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API-–∫–ª—é—á OpenAI. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ Script Properties.");
          break;
        case "rate_limit_exceeded":
          ui.alert("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenAI. –ü–æ–¥–æ–∂–¥–∏ 10‚Äì20 —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–≤—Ç–æ—Ä–∏.");
          break;
        default:
          ui.alert(`‚ùå –û—à–∏–±–∫–∞ GPT [${code}]:\n${message}`);
      }

      return null;
    }

    const text = json.choices[0].message.content;
    logToSheet("‚úÖ GPT RESPONSE", text);

    return parseGptResponse(text);
  } catch (e) {
    logToSheet("‚ùå PARSE ERROR", e.toString());
    ui.alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT. –°–º. –≤–∫–ª–∞–¥–∫—É Log.");
    return null;
  }
}
